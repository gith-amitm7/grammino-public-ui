const SOCKET_ENV="http://192.168.0.105:7777",DB_ENV="http://192.168.0.105:3000",IMG_ENV="http://192.168.0.105:3005/ipfs",token="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ZDQ2ZjU0NC03NjRlLTRiNzAtOTMzZC01MjhjOWRjODM5M2UiLCJwaG9uZSI6IjgxNjkwNDA5ODUiLCJuYW1lIjoiQW1pdCBNIiwiaWF0IjoxNTg1MDQzMjc5LCJleHAiOjE2MTY1NzkyNzl9.6FunAehjmM-k4KtnoJLddSENxxw27X2VEkSJRNnpjrM",isLoggingAvailable="undefined"!=typeof console&&null!==console;let networkDown=!1,requestFailed=!1,connected=!1,connectionError=!1,disconnected=!1,currentModalImageUrl="",conversationDOM,appBodyDOM,indicatorDOM,appMessageDOM,messageTextDOM,messageIconDOM;const initSocket=()=>{const socket=io.connect(SOCKET_ENV);socket.on("connect",(function(){log("Connected"),handleConnectEvent()})),socket.on("disconnect",(function(){log("Disconnected"),handleDisconnectEvent()})),socket.on("connect_error",(function(){log("Socket.io reported a generic error"),handleErrorEvent()})),socket.on("new_network_msg",data=>{log("New nw msg",data),handleNewPublicMessageEvent(data)})},initApp=()=>{indicatorDOM=document.getElementById("socket_indicator"),appMessageDOM=document.getElementById("app_message"),messageTextDOM=document.getElementById("message_text"),messageIconDOM=document.getElementById("message_icon"),loadPublicConversation()};function displayConnectedMessage(){appMessageDOM.className="bg-connected",messageIconDOM.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="check-circle" class="svg-inline" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/></svg>',messageTextDOM.innerHTML="Connected"}function displayErrorMessage(){appMessageDOM.className="bg-error",messageIconDOM.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="clock" class="svg-inline" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M256,8C119,8,8,119,8,256S119,504,256,504,504,393,504,256,393,8,256,8Zm92.49,313h0l-20,25a16,16,0,0,1-22.49,2.5h0l-67-49.72a40,40,0,0,1-15-31.23V112a16,16,0,0,1,16-16h32a16,16,0,0,1,16,16V256l58,42.5A16,16,0,0,1,348.49,321Z"/></svg>',messageTextDOM.innerHTML="Incoming messages may be delayed, reconnecting..."}function displayDisconnectedMessage(){appMessageDOM.className="bg-disconnected",messageIconDOM.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="clock" class="svg-inline" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M256,8C119,8,8,119,8,256S119,504,256,504,504,393,504,256,393,8,256,8Zm92.49,313h0l-20,25a16,16,0,0,1-22.49,2.5h0l-67-49.72a40,40,0,0,1-15-31.23V112a16,16,0,0,1,16-16h32a16,16,0,0,1,16,16V256l58,42.5A16,16,0,0,1,348.49,321Z"/></svg>',messageTextDOM.innerHTML="Incoming messages may be delayed"}function hideConnectionMessage(){appMessageDOM.className="hide"}function handleErrorEvent(){connectionError||(displayErrorMessage(),connectionError=!0,indicatorDOM.className="error")}function handleConnectEvent(){displayConnectedMessage(),connectionError=!1,indicatorDOM.className="connected",setTimeout(()=>{hideConnectionMessage()},2e3)}function handleDisconnectEvent(){displayDisconnectedMessage(),connectionError=!1,indicatorDOM.className="disconnected"}function reload(){location.reload()}function renderErrorScreen(){const conversationDOM=document.getElementById("conversation_container");conversationDOM.innerHTML='\n    <li class="error-icon">\n      <svg viewBox="0 0 24 24">\n        <path fill="currentColor" d="M14.83,13.83C15.55,13.11 16,12.11 16,11C16,9.89 15.55,8.89 14.83,8.17L16.24,6.76C17.33,7.85 18,9.35 18,11C18,12.65 17.33,14.15 16.24,15.24L14.83,13.83M14,11A2,2 0 0,0 12,9C11.4,9 10.87,9.27 10.5,9.68L13.32,12.5C13.73,12.13 14,11.6 14,11M17.66,16.66L19.07,18.07C20.88,16.26 22,13.76 22,11C22,8.24 20.88,5.74 19.07,3.93L17.66,5.34C19.11,6.78 20,8.79 20,11C20,13.22 19.11,15.22 17.66,16.66M22,21.18V20H20.82L22,21.18M20.27,22L21,22.73L19.73,24L17.73,22H15A1,1 0 0,1 14,23H10A1,1 0 0,1 9,22H2V20H9A1,1 0 0,1 10,19H11V15.27L8.34,12.61C8.54,13.07 8.82,13.5 9.17,13.83L7.76,15.24C6.67,14.15 6,12.65 6,11C6,10.77 6,10.54 6.04,10.31L4.37,8.64C4.14,9.39 4,10.18 4,11C4,13.22 4.89,15.22 6.34,16.66L4.93,18.07C3.12,16.26 2,13.76 2,11C2,9.61 2.29,8.28 2.81,7.08L1,5.27L2.28,4L3.7,5.42L5.15,6.87L6.63,8.35V8.35L8.17,9.9L10.28,12L11,12.71L18.27,20H18.28L20.28,22H20.27M15.73,20L13,17.27V19H14A1,1 0 0,1 15,20H15.73Z" />\n      </svg>\n    </li>\n    <li class="error-message">\n      <span>Network down!</span>\n    </li>\n    <li class="error-retry">\n      <a href="#" onclick="reload()">Retry</span>\n    </li>\n  '}function renderRequestFailedScreen(){const conversationDOM=document.getElementById("conversation_container");conversationDOM.innerHTML='\n    <li class="error-icon">\n      <svg viewBox="0 0 24 24">\n        <path fill="currentColor" d="M14.83,13.83C15.55,13.11 16,12.11 16,11C16,9.89 15.55,8.89 14.83,8.17L16.24,6.76C17.33,7.85 18,9.35 18,11C18,12.65 17.33,14.15 16.24,15.24L14.83,13.83M14,11A2,2 0 0,0 12,9C11.4,9 10.87,9.27 10.5,9.68L13.32,12.5C13.73,12.13 14,11.6 14,11M17.66,16.66L19.07,18.07C20.88,16.26 22,13.76 22,11C22,8.24 20.88,5.74 19.07,3.93L17.66,5.34C19.11,6.78 20,8.79 20,11C20,13.22 19.11,15.22 17.66,16.66M22,21.18V20H20.82L22,21.18M20.27,22L21,22.73L19.73,24L17.73,22H15A1,1 0 0,1 14,23H10A1,1 0 0,1 9,22H2V20H9A1,1 0 0,1 10,19H11V15.27L8.34,12.61C8.54,13.07 8.82,13.5 9.17,13.83L7.76,15.24C6.67,14.15 6,12.65 6,11C6,10.77 6,10.54 6.04,10.31L4.37,8.64C4.14,9.39 4,10.18 4,11C4,13.22 4.89,15.22 6.34,16.66L4.93,18.07C3.12,16.26 2,13.76 2,11C2,9.61 2.29,8.28 2.81,7.08L1,5.27L2.28,4L3.7,5.42L5.15,6.87L6.63,8.35V8.35L8.17,9.9L10.28,12L11,12.71L18.27,20H18.28L20.28,22H20.27M15.73,20L13,17.27V19H14A1,1 0 0,1 15,20H15.73Z" />\n      </svg>\n    </li>\n    <li class="error-message">\n      <span>Request failed!</span>\n    </li>\n    <li class="error-retry">\n      <a href="#" onclick="reload()">Retry</span>\n    </li>\n  '}function loadPublicConversation(){var xhttp=new XMLHttpRequest;xhttp.onreadystatechange=function(){if(4==this.readyState)if(200===this.status){const response=JSON.parse(this.responseText),{error:error,data:{error:err,data:conversation}}=response;networkDown=!1,error||err?(log("An error occured while fetching conversation"),requestFailed=!0,renderRequestFailedScreen()):(requestFailed=!1,initSocket(),appBodyDOM=document.getElementById("app_body"),renderConversation(conversation))}else this.status||(log("Could not fetch network data"),networkDown=!0,renderErrorScreen())},xhttp.open("GET",`${DB_ENV}/api/network/data`,!0),xhttp.setRequestHeader("Content-type","application/json"),xhttp.setRequestHeader("x-access-token",token),xhttp.send()}const getChatDOM=chat=>{const{sender:sender,body:body,time:time,type:type,ipfsPath:ipfsPath}=chat,formattedTime=formatDate(time),chatDOM="text"===type?`<li class="sent">\n        <img class="profile" src="assets/images/user.jpg" alt="">\n        <p>\n            <span class="chat-sender">${sender}</span>\n            <span class="chat-body">${body}</span>\n            <span class="chat-time">${formattedTime}</span>\n\n        </p>\n    </li>`:"image"===type?`<li class="sent">\n            <img class="profile" src="assets/images/user.jpg" alt="">\n            <p>\n                <span class="chat-sender">${sender}</span>\n                <span class="chat-body"><img onclick="openImageModal(this,'${sender}','${IMG_ENV}/${ipfsPath}','${formattedTime}')" class="chat-image" src="${IMG_ENV}/${ipfsPath}" alt=""></span>\n                <span class="chat-time">${formattedTime}</span>\n\n            </p>\n        </li>`:"video"===type?`<li class="sent">\n            <img class="profile" src="assets/images/user.jpg" alt="">\n            <p>\n                <span class="chat-sender">${sender}</span>\n                <span class="chat-body">\n                    <video class="chat-image" controls>\n                        <source src="${IMG_ENV}/${ipfsPath}" type="video/mp4">\n                        Your browser does not support the video tag.\n                    </video>\n                </span>\n                <span class="chat-time">${formattedTime}</span>\n\n            </p>\n        </li>`:null;return chatDOM};function renderConversation(conversation){let conversationDOMStr="";conversationDOM=document.getElementById("conversation_container"),log("Conv>",conversation),conversation.forEach(chat=>{const chatDOM=getChatDOM(chat);conversationDOMStr+=chatDOM}),conversationDOM.innerHTML=conversationDOMStr,scrollToBottom()}function handleNewPublicMessageEvent(data){if(conversationDOM){const chatDOMStr=getChatDOM(data.msg);let chatDOM=document.createRange().createContextualFragment(chatDOMStr);conversationDOM.appendChild(chatDOM),scrollToBottom()}}function scrollToTop(){appBodyDOM&&setTimeout(()=>{appBodyDOM.scrollTop=0},700)}function scrollToBottom(){appBodyDOM&&setTimeout(()=>{appBodyDOM.scrollTop=appBodyDOM.scrollHeight},700)}function formatDate(milliseconds=new Date){const d=new Date(milliseconds),dtf=new Intl.DateTimeFormat("en",{year:"numeric",month:"short",day:"2-digit",hour:"numeric",minute:"numeric"}),[{value:mmm},,{value:dd},,{value:yyyy},,{value:h},,{value:m},,{value:dp}]=dtf.formatToParts(d);return`${mmm} ${dd}, ${yyyy} ${h}:${m} ${dp}`}function openImageModal(elem,sender,imgUrl,time){const modalDOM=document.getElementById("image_modal");if(currentModalImageUrl!==imgUrl){const modalRendererDOM=document.getElementById("image_modal_renderer"),modalLinkDOM=document.getElementById("image_download_link"),senderPhoneDOM=document.getElementById("image_sender_phone"),imageTimeDOM=document.getElementById("image_time");modalRendererDOM.innerHTML="",modalRendererDOM.appendChild(elem),modalLinkDOM.setAttribute("href",imgUrl),senderPhoneDOM.innerHTML=sender,imageTimeDOM.innerHTML=time,currentModalImageUrl=imgUrl}modalDOM.classList.toggle("hide")}function closeImageModal(){const modalDOM=document.getElementById("image_modal");modalDOM.classList.toggle("hide")}function log(){isLoggingAvailable&&console.log(...arguments)}window.onload=initApp;